{"version":3,"sources":["components/PhoneCatalog.js","components/PhoneViewer.js","components/ShoppingCart.js","components/FilterPhones.js","components/SortPhones.js","App.js","serviceWorker.js","index.js"],"names":["PhoneCatalog","_ref","phones","click","addPhone","react_default","a","createElement","className","map","phone","data-phone-id","id","data-element","key","href","alt","name","src","imageUrl","onClick","snippet","PhoneViewer","_this$props","this","props","backToCatalog","selected","phonePage","filter","data-back-button","React","Component","ShoppingCart","selectedPhones","removePhone","arrPhones","Object","entries","Fragment","_renderList","index","FilterPhones","search","onChange","SortPhones","sort","event","value","PhoneApp","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","url","state","phoneViewerHide","pagePhone","clickedPhone","bind","assertThisInitialized","setState","copySelectedPhones","objectSpread","keys","includes","countMinus","k","filteredPhones","toConsumableArray","toLowerCase","target","getPhones","sortedPhonesByOrder","order","phoneA","phoneB","phoneAname","phoneBname","age","fetch","response","json","component","components_PhoneCatalog","components_PhoneViewer","components_FilterPhones","components_SortPhones","components_ShoppingCart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.959f31dc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction PhoneCatalog( {phones, click , addPhone} ){\r\n        return(\r\n            <ul className=\"phones\">\r\n                {phones.map((phone)=>{\r\n                    return <li\r\n                        className=\"thumbnail\"\r\n                        data-phone-id={phone.id}\r\n                        data-element=\"phone-element\"\r\n                        key={\"data-\"+phone.id}\r\n                    >\r\n                        <a\r\n                            href={\"#!/phones/motorola-xoom-with-wi-fi\"}\r\n                            className=\"thumb\"\r\n                            data-element=\"details-link\"\r\n                        >\r\n                        <img\r\n                            alt={phone.name+\"â„¢ with Wi-Fi\"}\r\n                            src={'./'+phone.imageUrl}\r\n                            onClick={()=>click(phone.id)}/>\r\n                        </a>\r\n\r\n                        <div className=\"phones__btn-buy-wrapper\">\r\n                            <a  href={'#!/phones/motorola-xoom-with-wi-fi'}\r\n                                className={\"btn btn-success\"}\r\n                                data-element={\"add-to-cart\"}\r\n                                onClick={()=>addPhone(phone.id)}\r\n                            >\r\n                                Add\r\n                            </a>\r\n                        </div>\r\n\r\n                        <a\r\n                            href={\"#!/phones/motorola-xoom-with-wi-fi\"}\r\n                            data-element=\"details-link\"\r\n                            onClick={()=>click(phone.id)}\r\n                        >{phone.name}\r\n                        </a>\r\n                        <p>{phone.snippet}</p>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n            )\r\n    }\r\n\r\nexport default PhoneCatalog;","import React from 'react';\r\n\r\nclass PhoneViewer extends React.Component{\r\n    render(){\r\n        const {backToCatalog, addPhone, selected, phones} = this.props;\r\n        const phonePage = phones.filter((phone)=>phone['id']===selected);\r\n\r\n        return(\r\n            <div>\r\n                <img\r\n                    data-element=\"large-image\"\r\n                    className=\"phone\"\r\n                    src={phonePage[0]['imageUrl']}\r\n                    alt={\"img\"}\r\n                />\r\n                    <button\r\n                        data-back-button=\"backToCatalog\"\r\n                        onClick={backToCatalog}\r\n                    >\r\n                        Back\r\n                    </button>\r\n                    <button\r\n                        data-element={\"add-to-cart-view\"}\r\n                        onClick={()=>addPhone(selected)}\r\n                    >Add to basket\r\n                    </button>\r\n\r\n                <h1>{}</h1>\r\n\r\n                <p>{}</p>\r\n\r\n                <ul className=\"phone-thumbs\">\r\n                    {/*${this._phoneDetails.images.map((imageUrl) => {*/}\r\n                    {/*return `<li>*/}\r\n            {/*<img*/}\r\n            {/*data-element=\"small-image\"*/}\r\n            {/*src=\"${imageUrl}\"*/}\r\n             {/*></li>`*/}\r\n                {/*}).join('')}*/}\r\n\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PhoneViewer;","import React from 'react';\r\n\r\nclass ShoppingCart extends React.Component{\r\n\r\n    render(){\r\n        const {selectedPhones, removePhone} = this.props;\r\n        const arrPhones = Object.entries(selectedPhones);\r\n        return(\r\n            <>\r\n            <p>Shopping Cart:</p>\r\n            <ul\r\n            data-element=\"add-phones\"\r\n            >\r\n                { this._renderList(arrPhones, removePhone )}\r\n\r\n            </ul>\r\n            </>\r\n    )\r\n    }\r\n\r\n    _renderList(arrPhones, removePhone){\r\n       return arrPhones.map((phone, index)=>{\r\n            return <li\r\n                 key={'add-phone'+index}\r\n            >\r\n                <button onClick={()=>removePhone(phone[0])}>x</button>\r\n                {phone[0]}: {phone[1]}\r\n                </li>\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ShoppingCart;","import React from 'react';\r\n\r\nfunction FilterPhones ({search}){\r\n\r\n     return(\r\n         <p>\r\n             Search:\r\n             <input onChange={search}/>\r\n         </p>\r\n     )\r\n}\r\n\r\nexport default FilterPhones;","import React from 'react';\r\n\r\nfunction SortPhones({sort}){\r\n        return(\r\n            <p>\r\n                Sort by:\r\n                <select onChange={(event)=>sort(event)}>\r\n                    <option value=\"age\">Newest</option>\r\n                    <option value=\"name\">Alphabetical</option>\r\n                </select>\r\n            </p>\r\n        )\r\n    }\r\n\r\nexport default SortPhones;","import React from 'react';\nimport PhoneCatalog from './components/PhoneCatalog';\nimport PhoneViewer from './components/PhoneViewer'\nimport ShoppingCart from './components/ShoppingCart'\nimport FilterPhones from './components/FilterPhones'\nimport SortPhones from './components/SortPhones'\n\n\nimport './App.css';\n\nclass PhoneApp extends React.Component{\n\n  constructor(){\n    super();\n    this.url = 'https://mate-academy.github.io/phone-catalogue-static/api/';\n    this.state = {\n         phones : [],\n         phoneViewerHide: true,\n         pagePhone:'',\n         selectedPhones:{}\n    };\n\n      this.clickedPhone=this.clickedPhone.bind(this);\n      this.backToCatalog=this.backToCatalog.bind(this);\n      this.addPhone=this.addPhone.bind(this);\n      this.removePhone=this.removePhone.bind(this);\n      this.filter=this.filter.bind(this);\n      this.sort=this.sort.bind(this);\n\n    // this.arrayFunctions = [\n    //     this.clickedPhone,\n    //     this.backToCatalog,\n    //     this.addPhone,\n    //     this.removePhone,\n    //     this.filter,\n    //     this.sort\n    // ].map((func)=>{\n    //     return func.bind(this)\n    // });\n    //   this.functions = {};\n    //\n    //   this.arrayFunctions.forEach((func)=>{\n    //       const propName = func.name.slice(6, func.name.length);\n    //       this.functions[propName] = func;\n    //       return this.functions;\n    //   });\n    //\n  }\n\n\n    clickedPhone(id){\n        this.setState({\n            phoneViewerHide: false,\n            pagePhone: id\n        });\n    }\n\n    backToCatalog(){\n        this.setState({\n            phoneViewerHide: true\n        })\n    }\n\n    addPhone(id){\n      const copySelectedPhones ={...this.state.selectedPhones},\n      keys = Object.keys(copySelectedPhones);\n\n      if(keys.includes(id)){\n          copySelectedPhones[id]++;\n      }else {\n          copySelectedPhones[id]=1;\n      }\n      this.setState({\n            selectedPhones: copySelectedPhones,\n        });\n\n      }\n\n    removePhone(id){\n        const countMinus = {...this.state.selectedPhones};\n\n        for(let k in countMinus){\n            if(id === k){\n                countMinus[k] = countMinus[k]-1;\n            }\n        }\n\n        if(countMinus[id]<1){\n            delete countMinus[id];\n            this.setState({selectedPhones: countMinus});\n        }\n        this.setState({selectedPhones: countMinus});\n    }\n\n     filter(event){\n         const phones = [...this.state.phones],\n         filteredPhones = phones.filter((phone)=>{\n                 return phone.id.toLowerCase().includes(event.target.value.toLowerCase())\n         });\n\n         if(event.target.value===''){\n             this.getPhones();\n\n         }else{\n             this.setState({\n                 phones: filteredPhones\n             })\n         }\n     }\n\n  sort(event){\n       const order = event.target.value,\n             phones = [...this.state.phones];\n\n       let sortedPhonesByOrder;\n\n      function compareString(phoneA, phoneB){\n          const phoneAname = phoneA.name.toLowerCase(),\n              phoneBname = phoneB.name.toLowerCase();\n          if(phoneAname<phoneBname){\n              return -1;\n          }\n          if(phoneAname>phoneBname){\n              return 1;\n          }\n          return 0;\n      }\n\n      function compareNumber(phoneA, phoneB){\n          return phoneA.age - phoneB.age\n      }\n\n      if(order ==='name'){\n         sortedPhonesByOrder = phones.sort(compareString);\n       }\n      if(order ==='age'){\n          sortedPhonesByOrder = phones.sort(compareNumber);\n      }\n\n      this.setState({phones: sortedPhonesByOrder})\n  }\n\n  async getPhones(){\n      const response = await fetch(this.url + 'phones.json');\n      const json = await response.json();\n      this.setState({phones: json});\n  }\n\n   componentDidMount() {\n        this.getPhones()\n    }\n\n  render(){\n\n      let component = <PhoneCatalog\n          click={this.clickedPhone}\n          addPhone ={this.addPhone}\n          phones = {this.state.phones}\n      />;\n\n      if(!this.state.phoneViewerHide) {\n          component = <PhoneViewer\n          backToCatalog={this.backToCatalog}\n          addPhone ={this.addPhone}\n          selected ={this.state.pagePhone}\n          phones = {this.state.phones}\n           />\n      }\n\n      return (\n          <div className=\"App\">\n              <div className=\"row\">\n                  <div className=\"col-md-2\">\n                      <section>\n                          <FilterPhones search={this.filter}/>\n                          <SortPhones sort={this.sort}/>\n                      </section>\n\n                      <section>\n                       <ShoppingCart\n                           selectedPhones={this.state.selectedPhones}\n                           removePhone ={this.removePhone}\n                       />\n                      </section>\n                  </div>\n                  <div className=\"col-md-10\"\n                  >\n                      { component }\n                  </div>\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default PhoneApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport PhoneApp from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<PhoneApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}