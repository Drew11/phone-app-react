{"version":3,"sources":["components/PhoneCatalog.js","components/PhoneViewer.js","components/ShoppingCart.js","components/FilterPhones.js","components/SortPhones.js","App.js","serviceWorker.js","index.js"],"names":["PhoneCatalog","_ref","phones","click","addPhone","getPhoneImg","react_default","a","createElement","className","map","phone","data-phone-id","id","data-element","key","href","alt","name","src","imageUrl","onClick","snippet","PhoneViewer","backToCatalog","selected","phoneImages","phonePage","filter","data-back-button","index","imgUrl","document","querySelector","ShoppingCart","_this$props","this","props","selectedPhones","removePhone","arrPhones","Object","entries","Fragment","_renderList","React","Component","FilterPhones","search","onChange","SortPhones","sort","event","value","PhoneApp","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getPhoneImages","asyncToGenerator","regenerator_default","mark","_callee","phoneId","response","json","wrap","_context","prev","next","fetch","url","sent","setState","stop","_x","apply","arguments","state","phoneViewerHide","pagePhone","clickedPhone","bind","assertThisInitialized","copySelectedPhones","objectSpread","keys","includes","countMinus","k","filteredPhones","toConsumableArray","toLowerCase","target","getPhones","sortedPhonesByOrder","order","phoneA","phoneB","phoneAname","phoneBname","age","component","components_PhoneCatalog","components_PhoneViewer","components_FilterPhones","components_SortPhones","components_ShoppingCart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0f9477e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction PhoneCatalog( {phones,\r\n                           click ,\r\n                           addPhone,\r\n                           getPhoneImg\r\n} ){\r\n        return(\r\n            <ul className=\"phones\">\r\n                {phones.map((phone)=>{\r\n                    return <li\r\n                        className=\"thumbnail\"\r\n                        data-phone-id={phone.id}\r\n                        data-element=\"phone-element\"\r\n                        key={\"data-\"+phone.id}\r\n                    >\r\n                        <a\r\n                            href={\"#!/phones/motorola-xoom-with-wi-fi\"}\r\n                            className=\"thumb\"\r\n                            data-element=\"details-link\"\r\n                        >\r\n                        <img\r\n                            alt={phone.name+\"â„¢ with Wi-Fi\"}\r\n                            src={'./'+phone.imageUrl}\r\n                            onClick={()=>{\r\n                                click(phone.id);\r\n                                getPhoneImg(phone['id'])\r\n                            }}/>\r\n                        </a>\r\n\r\n                        <div className=\"phones__btn-buy-wrapper\">\r\n                            <a  href={'#!/phones/motorola-xoom-with-wi-fi'}\r\n                                className={\"btn btn-success\"}\r\n                                data-element={\"add-to-cart\"}\r\n                                onClick={()=>addPhone(phone.id)}\r\n                            >\r\n                                Add\r\n                            </a>\r\n                        </div>\r\n\r\n                        <a\r\n                            href={\"#!/phones/motorola-xoom-with-wi-fi\"}\r\n                            data-element=\"details-link\"\r\n                            onClick={()=>click(phone.id)}\r\n                        >{phone.name}\r\n                        </a>\r\n                        <p>{phone.snippet}</p>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n            )\r\n    }\r\n\r\nexport default PhoneCatalog;","import React from 'react';\r\n\r\nfunction  PhoneViewer ({backToCatalog, addPhone, selected, phones , phoneImages}){\r\n\r\n    function setNewImage(imgUrl){\r\n       document.querySelector('.phone').src = imgUrl;\r\n    }\r\n\r\n    const phonePage = phones.filter((phone)=>phone['id']===selected);\r\n        return(\r\n            <div>\r\n                <img\r\n                    data-element=\"large-image\"\r\n                    className=\"phone\"\r\n                    src={phonePage[0]['imageUrl']}\r\n                    alt={\"img\"}\r\n                />\r\n                    <button\r\n                        data-back-button=\"backToCatalog\"\r\n                        onClick={backToCatalog}\r\n                    >\r\n                        Back\r\n                    </button>\r\n                    <button\r\n                        data-element={\"add-to-cart-view\"}\r\n                        onClick={()=>addPhone(selected)}\r\n                    >Add to basket\r\n                    </button>\r\n                <h1>{phonePage[0]['name']}</h1>\r\n\r\n                <p>{phonePage[0]['snippet']}</p>\r\n\r\n                <ul className=\"phone-thumbs\">\r\n                    { phoneImages.map((imageUrl, index) => {\r\n                    return <li\r\n                        key={index}\r\n                        onClick={()=>setNewImage(imageUrl)}\r\n                    >\r\n                            <img\r\n                            alt={\"img\"}\r\n                            src={imageUrl}\r\n                            />\r\n                           </li>\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default PhoneViewer;","import React from 'react';\r\n\r\nclass ShoppingCart extends React.Component{\r\n\r\n    render(){\r\n        const {selectedPhones, removePhone} = this.props;\r\n        const arrPhones = Object.entries(selectedPhones);\r\n        return(\r\n            <>\r\n            <p>Shopping Cart:</p>\r\n            <ul\r\n            data-element=\"add-phones\"\r\n            >\r\n                { this._renderList(arrPhones, removePhone )}\r\n\r\n            </ul>\r\n            </>\r\n    )\r\n    }\r\n\r\n    _renderList(arrPhones, removePhone){\r\n       return arrPhones.map((phone, index)=>{\r\n            return <li\r\n                 key={'add-phone'+index}\r\n            >\r\n                <button onClick={()=>removePhone(phone[0])}>x</button>\r\n                {phone[0]}: {phone[1]}\r\n                </li>\r\n        });\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default ShoppingCart;","import React from 'react';\r\n\r\nfunction FilterPhones ({search}){\r\n\r\n     return(\r\n         <p>\r\n             Search:\r\n             <input onChange={search}/>\r\n         </p>\r\n     )\r\n}\r\n\r\nexport default FilterPhones;","import React from 'react';\r\n\r\nfunction SortPhones({sort}){\r\n        return(\r\n            <p>\r\n                Sort by:\r\n                <select onChange={(event)=>sort(event)}>\r\n                    <option value=\"age\">Newest</option>\r\n                    <option value=\"name\">Alphabetical</option>\r\n                </select>\r\n            </p>\r\n        )\r\n    }\r\n\r\nexport default SortPhones;","import React from 'react';\r\nimport PhoneCatalog from './components/PhoneCatalog';\r\nimport PhoneViewer from './components/PhoneViewer'\r\nimport ShoppingCart from './components/ShoppingCart'\r\nimport FilterPhones from './components/FilterPhones'\r\nimport SortPhones from './components/SortPhones'\r\n\r\nimport './App.css';\r\n\r\nclass PhoneApp extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.url = 'https://mate-academy.github.io/phone-catalogue-static/api/phones';\r\n        this.state = {\r\n            phones: [],\r\n            phoneViewerHide: true,\r\n            pagePhone: '',\r\n            selectedPhones: {},\r\n            phoneImages: []\r\n        };\r\n\r\n        this.clickedPhone = this.clickedPhone.bind(this);\r\n        this.backToCatalog = this.backToCatalog.bind(this);\r\n        this.addPhone = this.addPhone.bind(this);\r\n        this.removePhone = this.removePhone.bind(this);\r\n        this.filter = this.filter.bind(this);\r\n        this.sort = this.sort.bind(this);\r\n\r\n        // this.arrayFunctions = [\r\n        //     this.clickedPhone,\r\n        //     this.backToCatalog,\r\n        //     this.addPhone,\r\n        //     this.removePhone,\r\n        //     this.filter,\r\n        //     this.sort\r\n        // ].map((func)=>{\r\n        //     return func.bind(this)\r\n        // });\r\n        //   this.functions = {};\r\n        //\r\n        //   this.arrayFunctions.forEach((func)=>{\r\n        //       const propName = func.name.slice(6, func.name.length);\r\n        //       this.functions[propName] = func;\r\n        //       return this.functions;\r\n        //   });\r\n        //\r\n    }\r\n\r\n\r\n    clickedPhone(id) {\r\n        this.setState({\r\n            phoneViewerHide: false,\r\n            pagePhone: id\r\n        });\r\n    }\r\n\r\n    backToCatalog() {\r\n        this.setState({\r\n            phoneViewerHide: true\r\n        })\r\n    }\r\n\r\n    addPhone(id) {\r\n        const copySelectedPhones = {...this.state.selectedPhones},\r\n            keys = Object.keys(copySelectedPhones);\r\n\r\n        if (keys.includes(id)) {\r\n            copySelectedPhones[id]++;\r\n        } else {\r\n            copySelectedPhones[id] = 1;\r\n        }\r\n        this.setState({\r\n            selectedPhones: copySelectedPhones,\r\n        });\r\n\r\n    }\r\n\r\n    removePhone(id) {\r\n        const countMinus = {...this.state.selectedPhones};\r\n\r\n        for (let k in countMinus) {\r\n            if (id === k) {\r\n                countMinus[k] = countMinus[k] - 1;\r\n            }\r\n        }\r\n\r\n        if (countMinus[id] < 1) {\r\n            delete countMinus[id];\r\n            this.setState({selectedPhones: countMinus});\r\n        }\r\n        this.setState({selectedPhones: countMinus});\r\n    }\r\n\r\n    filter(event) {\r\n        const phones = [...this.state.phones],\r\n            filteredPhones = phones.filter((phone) => {\r\n                return phone.id.toLowerCase().includes(event.target.value.toLowerCase())\r\n            });\r\n\r\n        if (event.target.value === '') {\r\n            this.getPhones();\r\n\r\n        } else {\r\n            this.setState({\r\n                phones: filteredPhones\r\n            })\r\n        }\r\n    }\r\n\r\n    sort(event) {\r\n        const order = event.target.value,\r\n            phones = [...this.state.phones];\r\n\r\n        let sortedPhonesByOrder;\r\n\r\n        function compareString(phoneA, phoneB) {\r\n            const phoneAname = phoneA.name.toLowerCase(),\r\n                phoneBname = phoneB.name.toLowerCase();\r\n            if (phoneAname < phoneBname) {\r\n                return -1;\r\n            }\r\n            if (phoneAname > phoneBname) {\r\n                return 1;\r\n            }\r\n            return 0;\r\n        }\r\n\r\n        function compareNumber(phoneA, phoneB) {\r\n            return phoneA.age - phoneB.age\r\n        }\r\n\r\n        if (order === 'name') {\r\n            sortedPhonesByOrder = phones.sort(compareString);\r\n        }\r\n        if (order === 'age') {\r\n            sortedPhonesByOrder = phones.sort(compareNumber);\r\n        }\r\n\r\n        this.setState({phones: sortedPhonesByOrder})\r\n    }\r\n\r\n    async getPhones() {\r\n        const response = await fetch(this.url + '.json');\r\n        const json = await response.json();\r\n\r\n        this.setState({phones: json});\r\n    }\r\n\r\n    getPhoneImages = async (phoneId) => {\r\n        const response = await fetch(this.url + '/' + phoneId + '.json');\r\n        const json = await response.json();\r\n\r\n        this.setState({phoneImages: json['images']});\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getPhones()\r\n    }\r\n\r\n    render() {\r\n\r\n        let component = <PhoneCatalog\r\n            getPhoneImg={this.getPhoneImages}\r\n            click={this.clickedPhone}\r\n            addPhone={this.addPhone}\r\n            phones={this.state.phones}\r\n        />;\r\n\r\n        if (!this.state.phoneViewerHide) {\r\n            component = <PhoneViewer\r\n                backToCatalog={this.backToCatalog}\r\n                addPhone={this.addPhone}\r\n                selected={this.state.pagePhone}\r\n                phones={this.state.phones}\r\n                phoneImages={this.state.phoneImages}\r\n            />\r\n        }\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <section>\r\n                            <FilterPhones search={this.filter}/>\r\n                            <SortPhones sort={this.sort}/>\r\n                        </section>\r\n\r\n                        <section>\r\n                            <ShoppingCart\r\n                                selectedPhones={this.state.selectedPhones}\r\n                                removePhone={this.removePhone}\r\n                            />\r\n                        </section>\r\n                    </div>\r\n                    <div className=\"col-md-10\"\r\n                    >\r\n                        {component}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PhoneApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport PhoneApp from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<PhoneApp />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}